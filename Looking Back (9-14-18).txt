Refactoring:
-code was written rushed and messily; refactor and make it more structured

Performance:
-Should have been able to handle tens of thousands of units and run around 30 fps, at max probably handled 7-10k

Graaphics:
-add sprites planets, units don't matter but performance wise it would be interesting

Orbit Exit Collisions:
-When units were exiting orbit they'd collide with backside of planet and be reset; They should've avoided it or
been relocated to the other side.

Movement:
-Units should have moved in a cloud rather than one pixel

Level Design:
-Should have included designed levels and option for procedurally generated levels

Planet Placement:
-Planets should have been able to be placed within confines of screen without hitting each other

Networking:
-Local/Online Multiplayer should have been developed

Player Specific Control:
-Player should only be able to move their units

AI:
-Computer controlled enemy should exist; Dartmouth paper on auralux AI is useful in this case

Upgrades:
-multiple upgrades listed in mechanics breakdown; their implementations would be interesting

Specifics:
-unitKill: should it reinstantiate units instead of completely deleting them and generating new ones?
-unitSelect: it should have a parameter for player id and filter selected units based on that id
-largest increase in efficiency is going to be in class specific methods
-reimagining the units not as objects may have an affect
